var __decorate=this&&this.__decorate||function(e,r,t,a){var o,i=arguments.length,s=i<3?r:null===a?a=Object.getOwnPropertyDescriptor(r,t):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,r,t,a);else for(var c=e.length-1;c>=0;c--)(o=e[c])&&(s=(i<3?o(s):i>3?o(r,t,s):o(r,t))||s);return i>3&&s&&Object.defineProperty(r,t,s),s};import"reflect-metadata";import{injectable}from"tsyringe";import{Equal}from"typeorm";import{Streamers}from"../../domain/entities/streamers.entity.js";import{dataSource}from"../config/datasource.js";import{CrudRepository}from"./crud.repository.js";let TwitchRepository=class extends CrudRepository{async isStreamerExist(e){return!await dataSource.manager.findOne(Streamers,{where:{name:e}})}async saveMainUrl(e,r,t){try{return await dataSource.manager.update(Streamers,!1,{update:{mainurlm3u8:r},where:{id:Equal(e),platform:Equal(t)}})}catch(e){throw new Error(e.message)}}async addStreamer(e,r){try{if(!await this.isStreamerExist(e))return await dataSource.manager.save(e)}catch(e){throw new Error(e.message)}}};TwitchRepository=__decorate([injectable()],TwitchRepository);export{TwitchRepository};