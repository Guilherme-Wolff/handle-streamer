var __decorate=this&&this.__decorate||function(e,r,a,t){var n,o=arguments.length,s=o<3?r:null===t?t=Object.getOwnPropertyDescriptor(r,a):t;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,r,a,t);else for(var m=e.length-1;m>=0;m--)(n=e[m])&&(s=(o<3?n(s):o>3?n(r,a,s):n(r,a))||s);return o>3&&s&&Object.defineProperty(r,a,s),s};import{injectable}from"tsyringe";import{In,IsNull,Like,Not}from"typeorm";import{Streamers}from"../../domain/entities/streamers.entity.js";import{dataSource}from"../config/datasource.js";import{CrudRepository}from"./crud.repository.js";let StreamersRepository=class extends CrudRepository{async isStreamerExist(e){return!!await dataSource.manager.findOne(Streamers,{where:{name:e}})}async isStreamerExist_for_update(e,r){return!!await dataSource.manager.findOne(Streamers,{where:{name:e,platform:r}})}async getAllStreamersNameEAvatar(){const e=await dataSource.manager.find(Streamers,{where:{avatar:Not(Like("https://i.ibb.co%"))},select:["name","avatar"]});return e.length>0?e:null}async getAllStreamers(){const e=await dataSource.manager.find(Streamers,{select:["name","platform"]});return e.length>0?e:null}async getStreamersWithoutSpecificCountries(){const e=await dataSource.manager.find(Streamers,{select:["name","platform"],where:[{country:Not(In(["br","co"]))},{country:IsNull()}]});return e.length>0?e:null}async getStreamersForSaving(){try{const e=await dataSource.manager.find(Streamers,{where:{is_saving:!1,baned:!1},order:{number_followers:"DESC"},take:5,select:["id","name","platform","country"]});if(0===e.length)return null;const r=e.map((e=>e.id));return await dataSource.manager.update(Streamers,{id:In(r)},{is_saving:!0}),e}catch(e){throw new Error("Unable to update streamers.")}}async getStreamersForBan(){try{const e=await dataSource.manager.find(Streamers,{where:{baned:!1},order:{number_followers:"DESC"},take:5,select:["id","name","platform"]});if(0===e.length)return null;const r=e.map((e=>e.id));return await dataSource.manager.update(Streamers,{id:In(r)},{is_saving:!0}),e}catch(e){throw new Error("Unable to update streamers.")}}async addBan(e,r){try{return await dataSource.manager.update(Streamers,{name:e,platform:r},{baned:!0})}catch(e){throw new Error("Unable to update streamer.")}}async returnStreamersToDatabase(e){if(0===e.length)return null;try{const r=await dataSource.manager.createQueryBuilder().update(Streamers).set({is_saving:!1}).where("name IN (:...names)",{names:e}).execute();return r.raw.length>0?r.raw:null}catch(e){throw new Error("Unable to update streamers.")}}async updateStopSaving(e,r="tikitok"){return await dataSource.manager.update(Streamers,{name:e,platform:r},{is_saving:!1})}async isStreamerExist_for_Update(e,r){return!!await dataSource.manager.findOne(Streamers,{where:{name:e,platform:r}})}async updateMainUrl(e,r,a){try{return await dataSource.manager.update(Streamers,{name:e,platform:a},{mainurlm3u8:r})}catch(e){throw new Error(e.message)}}async updateAvatarUrl(e,r,a){try{return await dataSource.manager.update(Streamers,{name:e,platform:r},{avatar:a})}catch(e){throw new Error(e.message)}}async updateCountry(e,r,a){try{return await dataSource.manager.update(Streamers,{name:e,platform:r},{country:a})}catch(e){throw new Error(e.message)}}async addStreamer(e,r,a,t){try{const n=new Streamers(e,r,a,t);return n?await dataSource.manager.save(Streamers,n):await!1}catch(e){throw new Error(e.message)}}async getCountry(e,r){try{return(await dataSource.manager.find(Streamers,{select:["country"],where:{name:e,platform:r}}))[0].country}catch(e){throw new Error(e.message)}}async getStreamerId(e,r){try{const a=await dataSource.manager.find(Streamers,{where:{name:e,platform:r},select:["id"]});return a.length>0?a[0].id:""}catch(e){return""}}async getUrl(e,r){try{const a="\n        SELECT mainurlm3u8\n        FROM streamers\n        WHERE name = $1 AND platform = $2\n      ";new Streamers(e,r);return await this.isStreamerExist(e)?await!1:await dataSource.manager.query(a,[e,r])}catch(e){throw new Error(e.message)}}async addAlbumID(e,r,a){try{return await dataSource.manager.update(Streamers,{name:e,platform:a},{album_id:r})}catch(e){throw new Error(e.message)}}async getAlbumStreamer(e,r){const a=await dataSource.manager.find(Streamers,{where:{name:e,platform:r},select:["album_id"]}),t=a[0]?.album_id;return t||""}};StreamersRepository=__decorate([injectable()],StreamersRepository);export{StreamersRepository};function LIKE(e){throw new Error("Function not implemented.")}