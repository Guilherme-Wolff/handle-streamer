var __decorate=this&&this.__decorate||function(e,r,t,a){var o,s=arguments.length,n=s<3?r:null===a?a=Object.getOwnPropertyDescriptor(r,t):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)n=Reflect.decorate(e,r,t,a);else for(var i=e.length-1;i>=0;i--)(o=e[i])&&(n=(s<3?o(n):s>3?o(r,t,n):o(r,t))||n);return s>3&&n&&Object.defineProperty(r,t,n),n};import"reflect-metadata";import{injectable}from"tsyringe";import{Equal}from"typeorm";import{Users}from"../../domain/entities/users.entity.js";import{dataSource}from"../config/datasource.js";import{CrudRepository}from"./crud.repository.js";let AuthRepository=class extends CrudRepository{async findById(e){try{return await dataSource.manager.findOne(Users,{select:{name:!0,role:!0},where:{id:Equal(e)}})}catch(e){throw new Error(e.message)}}async addUser(e){try{return await dataSource.manager.save(Users,e)}catch(e){throw new Error(e.message)}}async getAllUsers(){try{return await dataSource.manager.find(Users)}catch(e){throw new Error(e.message)}}async isEmailUnique(e){return!await dataSource.manager.findOne(Users,{where:{email:e}})}async isNameUnique(e){return!await dataSource.manager.findOne(Users,{where:{name:e}})}async validLogin(e,r){return!await dataSource.manager.findOne(Users,{where:{email:e,password:r}})}async getPasswordByEmail(e){return await dataSource.manager.findOne(Users,{where:{email:e}})}};AuthRepository=__decorate([injectable()],AuthRepository);export{AuthRepository};