var __decorate=this&&this.__decorate||function(e,r,t,a){var s,i=arguments.length,n=i<3?r:null===a?a=Object.getOwnPropertyDescriptor(r,t):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)n=Reflect.decorate(e,r,t,a);else for(var o=e.length-1;o>=0;o--)(s=e[o])&&(n=(i<3?s(n):i>3?s(r,t,n):s(r,t))||n);return i>3&&n&&Object.defineProperty(r,t,n),n};import"reflect-metadata";import{injectable}from"tsyringe";import{Lives}from"../../domain/entities/lives.entity.js";import{dataSource}from"../config/datasource.js";import{CrudRepository}from"./crud.repository.js";import{Streamers}from"../../domain/entities/streamers.entity.js";let LivesRepository=class extends CrudRepository{async saveLivesAndGetId(e){try{return(await dataSource.manager.save(Lives,e)).id}catch(e){throw new Error(e.message)}}async saveLives(e){try{const r=await dataSource.manager.save(Lives,e);return r?r.id:""}catch(e){throw new Error(e.message)}}async getAllLives(){try{return await dataSource.manager.find(Lives)}catch(e){throw new Error(e.message)}}async isStreamExist(e,r){return!!await dataSource.manager.findOne(Lives,{where:{streamer:e,platform:r}})}async getCurrentLive(e,r){return await dataSource.manager.findOne(Lives,{where:{streamer:e,platform:r},order:{created_at:"DESC"}})||null}async getCurrentLiveThumb(e,r){return await dataSource.manager.findOne(Lives,{where:{streamer:e,platform:r},select:["thumbnail"],order:{created_at:"DESC"}})||null}async getStreamerLives(e,r){const t=await dataSource.manager.find(Streamers,{where:{name:e,platform:r},select:["id"]});if(t[0]){return await dataSource.manager.find(Lives,{where:{streamer_id:t[0].id}})}return[]}async updateStreamUrls(e,r){try{return await dataSource.manager.update(Lives,{id:e},{urls:r})}catch(e){throw new Error(e.message)}}async updateChat(e,r){try{return await dataSource.manager.update(Lives,{id:e},{chat:r})}catch(e){throw new Error(e.message)}}async updateThumbnail(e,r){try{return await dataSource.manager.update(Lives,{id:e},{thumbnail:r})}catch(e){throw new Error(e.message)}}async getStreamById(e){return await dataSource.manager.findOne(Lives,{where:{id:e}})}async deleteLivesWithoutUrl(e){try{return await dataSource.manager.createQueryBuilder().delete().from(Lives).where("(urls IS NULL OR urls = '') AND streamer IN (:...streamers)",{streamers:e}).execute()}catch(e){throw new Error(e.message)}}};LivesRepository=__decorate([injectable()],LivesRepository);export{LivesRepository};