import*as fs from"node:fs";import{spawn}from"child_process";import{PATH_RESPONSE_UPLOADS,PATH_STREAMS_THUMBNAILS,PATH_STREAMS_OUTPUT}from"../../../../root_path.js";import{LiveService}from"../services/lives.service.js";export class UploadJsonBlobService{BUCKET_URL="";AUTH_TOKEN="";PIXELDRAIN_KEY="813c34ef-cbb9-4189-b91a-81427a5f0381";PATH_STREAMS_OUTPUT=PATH_STREAMS_OUTPUT;PATH_STREAMS_THUMBNAILS=PATH_STREAMS_THUMBNAILS;PATH_RESPONSE_UPLOADS=PATH_RESPONSE_UPLOADS;BUNKER_TOKEN="8smWG8uhfjFhEVrwn7bZ3Oa6TFenghAO7vtv7VsU3V2CSwTr1FckqvRbLAH7aDjd";JASONBLOB_API="https://jsonblob.com/api/jsonBlob";TOKEN_BUNKR="8smWG8uhfjFhEVrwn7bZ3Oa6TFenghAO7vtv7VsU3V2CSwTr1FckqvRbLAH7aDjd";URL_FOR_GET_SERVER_BUNKRS="https://app.bunkrr.su/api/node";EXTENSION_DEFAULT=".mp4";async uploadChat(t,a,e,s){let T=["-i","-X","POST","-d",`@${this.PATH_STREAMS_OUTPUT}${t}/${t}chat.json`,"-H","Content-Type:  application/json","-H","Accept: application/json",this.JASONBLOB_API];spawn("curl",T).stdout.on("data",(async t=>{let e="";e+=t.toString();const s=e.match(/location:\s*(.*)/i);if(s){const t=s[1].trim();await this.updateChatUrl(a,t)}}))}async deleteFileStream(t){fs.unlink(this.PATH_STREAMS_OUTPUT+t,(t=>{}))}async deleteFileResponseUpload(t){fs.unlink(PATH_RESPONSE_UPLOADS+t,(t=>{}))}async updateStreamUrl(t,a){const e=new LiveService;return await e.updateStreamUrls(t,a)}async updateChatUrl(t,a){const e=new LiveService;await e.updateChat(t,a)}async updateThumbnail(t,a,e){const s=new LiveService;return await s.updateThumbnail(t,a,e)}}