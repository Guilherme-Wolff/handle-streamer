import*as fs from"node:fs";import{rm}from"fs/promises";import{spawn}from"child_process";import{PATH_RESPONSE_UPLOADS,PATH_STREAMS_THUMBNAILS,PATH_STREAMS_OUTPUT}from"../../../../root_path.js";import{LiveService}from"../services/lives.service.js";import{StreamersService}from"../services/streamers.service.js";import{config}from"../config/index.js";export class UploadPixeldrainService{BUCKET_URL="";AUTH_TOKEN="";PIXELDRAIN_KEY=config.PIXELDRAIN_KEY;PATH_STREAMS_OUTPUT=PATH_STREAMS_OUTPUT;PATH_STREAMS_THUMBNAILS=PATH_STREAMS_THUMBNAILS;PATH_RESPONSE_UPLOADS=PATH_RESPONSE_UPLOADS;BUNKER_TOKEN="8smWG8uhfjFhEVrwn7bZ3Oa6TFenghAO7vtv7VsU3V2CSwTr1FckqvRbLAH7aDjd";PIXELDRAIN_API="https://pixeldrain.com/api/file";TOKEN_BUNKR="8smWG8uhfjFhEVrwn7bZ3Oa6TFenghAO7vtv7VsU3V2CSwTr1FckqvRbLAH7aDjd";URL_FOR_GET_SERVER_BUNKRS="https://app.bunkrr.su/api/node";EXTENSION_DEFAULT=".mp4";async uploadStream(e,t,a,i){const s=e+".json";let r=["-X","PUT","-H",`Cookie:pd_auth_key=${this.PIXELDRAIN_KEY}`,"-H","Content-Type: video/mp4","--data-binary",`@${this.PATH_STREAMS_OUTPUT}${e}/${e}${this.EXTENSION_DEFAULT}`,`${this.PIXELDRAIN_API}/${e}${this.EXTENSION_DEFAULT}`];const n=spawn("curl",r,{stdio:["inherit","pipe","pipe"]});n.on("close",(async s=>{const r=await this.pixeldrainReadFileResponseUploadStream(e,t,a,i);return await this.deleteFolderRecursive(`${this.PATH_STREAMS_OUTPUT}${e}`),await r}));const o=fs.createWriteStream(PATH_RESPONSE_UPLOADS+s);n.stdout.pipe(o)}async uploadChat(e,t,a,i){const s=e+"chat.json";let r=["-X","PUT","-H",`Authorization: Basic ${this.PIXELDRAIN_KEY}`,"-H",`Cookie:pd_auth_key=${this.PIXELDRAIN_KEY}`,"-H","Content-Type:  application/json","--data-binary",`@${this.PATH_STREAMS_OUTPUT}${e}/${e}chat.json`,`${this.PIXELDRAIN_API}/${e}chat.json`];const n=spawn("curl",r,{stdio:["inherit","pipe","pipe"]});n.on("close",(async e=>{const r=await this.pixeldrainReadFileResponseUploadChat(s,t,a,i);return await r}));const o=fs.createWriteStream(PATH_RESPONSE_UPLOADS+s);n.stdout.pipe(o)}async deleteFileStream(e){fs.unlink(this.PATH_STREAMS_OUTPUT+e,(e=>{}))}async pixeldrainReadFileResponseUploadStream(e,t,a="tiktok",i){let s="";return fs.readFile(PATH_RESPONSE_UPLOADS+e+".json","utf8",(async(r,n)=>{if(!r)try{const r=new StreamersService;s=await JSON.parse(n);const o=s.id;return await this.updateStreamUrl(o,i),await r.addAlbumID(t,o,a),await this.deleteFileResponseUpload(e+".json"),await s}catch(e){}})),await s}async pixeldrainReadFileResponseUploadChat(e,t,a,i="tiktok"){let s="";return fs.readFile(PATH_RESPONSE_UPLOADS+e,"utf8",(async(e,r)=>{if(!e)try{const e=new StreamersService;s=await JSON.parse(r);const n=s.id;await e.addAlbumID(a,n,i);await this.updateChatUrl(t,n);return await s}catch(e){}})),await s}async deleteFileResponseUpload(e){fs.unlink(PATH_RESPONSE_UPLOADS+e,(e=>{}))}async updateStreamUrl(e,t){const a=new LiveService;return await a.updateStreamUrls(e,t)}async updateChatUrl(e,t){const a=new LiveService;await a.updateChat(e,t)}async updateThumbnail(e,t,a){const i=new LiveService;return await i.updateThumbnail(e,t,a)}async deleteFolderRecursive(e){try{await rm(e,{recursive:!0,force:!0})}catch(e){}}}