import*as fs from"node:fs";import{spawn}from"child_process";import{PATH_RESPONSE_UPLOADS,PATH_STREAMS_THUMBNAILS,PATH_STREAMS_OUTPUT}from"../../../../root_path.js";import{LiveService}from"../services/lives.service.js";import{StreamersService}from"../services/streamers.service.js";import axios from"axios";export class uploadService{BUCKET_URL="";AUTH_TOKEN="";PIXELDRAIN_KEY="f69178c6-f234-486e-a0f2-e58b92bd6b4d";PATH_STREAMS_OUTPUT=PATH_STREAMS_OUTPUT;PATH_STREAMS_THUMBNAILS=PATH_STREAMS_THUMBNAILS;PATH_RESPONSE_UPLOADS=PATH_RESPONSE_UPLOADS;BUNKER_TOKEN="8smWG8uhfjFhEVrwn7bZ3Oa6TFenghAO7vtv7VsU3V2CSwTr1FckqvRbLAH7aDjd";PIXELDRAIN_API="https://pixeldrain.com/api/file";TOKEN_BUNKR="8smWG8uhfjFhEVrwn7bZ3Oa6TFenghAO7vtv7VsU3V2CSwTr1FckqvRbLAH7aDjd";URL_FOR_GET_SERVER_BUNKRS="https://app.bunkrr.su/api/node";EXTENSION_DEFAULT=".mp4";async getServerBunkr(){const{data:t}=await axios.get(this.URL_FOR_GET_SERVER_BUNKRS,{headers:{token:this.TOKEN_BUNKR}});return t.success?t.url:""}async uploadStream(t,e,a){const s=t+".json";let i=["-X","PUT","-H",`Authorization: Basic ${this.PIXELDRAIN_KEY}`,"-H",`Cookie:pd_auth_key=${this.PIXELDRAIN_KEY}`,"-H","Content-Type: video/mp4","--data-binary",`@${this.PATH_STREAMS_OUTPUT}${t}/${t}${this.EXTENSION_DEFAULT}`,`${this.PIXELDRAIN_API}/${t}${this.EXTENSION_DEFAULT}`];this.PIXELDRAIN_KEY,this.PIXELDRAIN_KEY,this.PATH_STREAMS_OUTPUT,this.EXTENSION_DEFAULT,this.PIXELDRAIN_API,this.EXTENSION_DEFAULT;const r=spawn("curl",i,{stdio:["inherit","pipe","pipe"]});r.on("close",(async s=>{const i=await this.pixeldrainReadFileResponseUploadStream(t,e,a);return await i}));const n=fs.createWriteStream(PATH_RESPONSE_UPLOADS+s);r.stdout.pipe(n)}async uploadChat(t,e,a){const s=t+"chat.json";let i=["-X","PUT","-H",`Authorization: Basic ${this.PIXELDRAIN_KEY}`,"-H",`Cookie:pd_auth_key=${this.PIXELDRAIN_KEY}`,"-H","Content-Type:  application/json","--data-binary",`@${this.PATH_STREAMS_OUTPUT}${t}/${t}`,`${this.PIXELDRAIN_API}/${t}`];const r=spawn("curl",i,{stdio:["inherit","pipe","pipe"]});r.on("close",(async t=>{const i=await this.pixeldrainReadFileResponseUploadChat(s,e,a);return await i}));const n=fs.createWriteStream(PATH_RESPONSE_UPLOADS+s);r.stdout.pipe(n)}async getFileNameInPath(t){const e=Math.max(t.lastIndexOf("/"),t.lastIndexOf("\\"));return t.substring(e+1)}async getFileJsonResponseUpload(t){return await!0}async deleteFileStream(t){fs.unlink(this.PATH_STREAMS_OUTPUT+t,(t=>{}))}async pixeldrainReadFileResponseUploadStream(t,e,a="tiktok"){let s="";return fs.readFile(PATH_RESPONSE_UPLOADS+t+".json","utf8",(async(t,i)=>{if(!t)try{const t=new StreamersService;s=await JSON.parse(i);const r=s.id;return await this.updateStreamUrl(r,e,a),await t.addAlbumID(e,r,a),await s}catch(t){}})),await s}async pixeldrainReadFileResponseUploadChat(t,e,a="tiktok"){let s="";return fs.readFile(PATH_RESPONSE_UPLOADS+t,"utf8",(async(t,i)=>{if(!t)try{s=await JSON.parse(i);const t=s.id;await this.updateStreamUrl(t,e,a);return await s}catch(t){}})),await s}async deleteFileResponseUpload(t){fs.unlink(PATH_RESPONSE_UPLOADS+t,(t=>{}))}async updateStreamUrl(t,e,a){const s=new LiveService;return await s.updateStreamUrls(t,a)}async updateThumbnail(t,e,a){const s=new LiveService;return await s.updateThumbnail(t,e,a)}}