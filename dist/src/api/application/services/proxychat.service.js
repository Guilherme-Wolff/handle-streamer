import*as fs from"fs/promises";import*as fs_sync from"node:fs";import{spawn}from"child_process";import{HTML_USERS_PATH,PROXIES_PATH}from"../../../../root_path.js";import*as cheerio from"cheerio";export class FileUtilities{constructor(){}current_proxies=[];file_name_proxies="freeproxies";async getProxiesHtmls(t=this.file_name_proxies,e="http",r="1"){const i=`https://www.freeproxy.world/?type=${e}&anonymity=&country=&speed=&port=&page=${r}`;try{const e=t+".html",r=spawn("curl",["-X","GET",i],{stdio:["inherit","pipe","pipe"]}),s=fs_sync.createWriteStream(HTML_USERS_PATH+e);r.stdout.pipe(s),await new Promise(((t,e)=>{r.on("close",(r=>{0===r?t():e(new Error(`Failed to fetch HTML. Exit code: ${r}`))}))}));const o=await this.readFileHTML(t),a=await this.extractProxies(o);return await a}catch(t){throw new Error(t.message)}}async listProxies(){this.current_proxies.map((t=>{}))}async extractProxies(t){const e=cheerio.load(t);let r=[];e("tr").each(((t,i)=>{const s=e(i).find("td.show-ip-div").text().trim(),o=e(i).find('td a[href^="/?port="]').text().trim(),a=e(i).find("td .table-country").text().trim(),n=e(i).find("td:nth-child(4)").text().trim(),c=e(i).find('td a[href^="/?speed="]').text().trim(),p=e(i).find('td a[href^="/?type="]').text().trim(),f=e(i).find('td a[href^="/?anonymity="]').text().trim();s&&o&&r.push({ip:s,port:o,country:a,city:n,speed:c,type:p,anonymity:f})}));try{const t={proxies:[...r]},e=JSON.stringify(t,null,2),i=PROXIES_PATH+this.file_name_proxies+".json";await fs.mkdir(PROXIES_PATH,{recursive:!0}),await fs.writeFile(i,e,"utf8");const s=JSON.parse(await this.readFileJson(this.file_name_proxies));s&&s.proxies.map((t=>{}))}catch(t){}return r}async readFileHTML(t){try{const e=HTML_USERS_PATH+t+".html";return await fs.readFile(e,"utf8")}catch(t){throw new Error(t.message)}}async readFileJson(t){try{const e=PROXIES_PATH+t+".json";return await fs.readFile(e,"utf8")}catch(t){throw new Error(t.message)}}async deleteFile(t){try{await fs.unlink(t)}catch(t){return}}}