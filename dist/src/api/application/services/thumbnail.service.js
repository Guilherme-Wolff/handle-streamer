import{exec,spawn}from"child_process";import util from"util";import{promises as fsPromises}from"fs";import*as fs from"node:fs";import{LiveService}from"./lives.service.js";import{PATH_RESPONSE_UPLOADS,PATH_STREAMS_THUMBNAILS,PATH_STREAMS_OUTPUT}from"../../../../root_path.js";import{UploaderService}from"../services/uploader.imgbb.service.js";const execPromise=util.promisify(exec);export class ThumbnailService{constructor(){}imgbb_client_id="713bcfdb3686407e86c8061d80f78369";BUCKET_URL="bunkr.ru";AUTH_TOKEN="";PATH_STREAMS_OUTPUT=PATH_STREAMS_OUTPUT;PATH_STREAMS_THUMBNAILS=PATH_STREAMS_THUMBNAILS;PATH_RESPONSE_UPLOADS=PATH_RESPONSE_UPLOADS;EXTENSION_DEFAULT=".mp4";async checkFileExists(e){try{return await fsPromises.access(e),!0}catch(e){return!1}}async waitForFile(e,r=6e4){const t=Date.now();for(;Date.now()-t<r;){if(await this.checkFileExists(e))return!0;await new Promise((e=>setTimeout(e,1e3)))}return!1}async getVideoDuration(e){return await this.waitForFile(e)?new Promise(((r,t)=>{const i=spawn("ffprobe",["-v","error","-show_entries","format=duration","-of","default=noprint_wrappers=1:nokey=1",e]);let s="";i.stdout.on("data",(e=>{s+=e})),i.stderr.on("data",(e=>{})),i.on("close",(e=>{0===e?r(parseFloat(s.trim())):t(new Error(`ffprobe process exited with code ${e}`))}))})):0}async createThumbnail(e,r,t){try{const i=await this.getVideoDuration(e);if(0===i)return;[.1*i,.3*i,.6*i,.9*i].map((e=>e.toFixed(2)));spawn("ffmpeg",["-i",e,"-vf","select=eq(n\\,0)+eq(n\\,30)+eq(n\\,60)+eq(n\\,90),scale=320:-1,tile=2x2","-frames:v","1","-y",r]).on("close",(async e=>{if(0===e){if(!this.waitForFile(r))return 0;{const e=new UploaderService,i=await e.thumbnailUpload(r);if(i.sucess){const e=new LiveService;await e.updateThumbnailUrl(t,i.url)}}}}))}catch(e){}}async pixeldrainReadFileResponseUploadStream(e,r,t="tiktok",i){const s=`${PATH_RESPONSE_UPLOADS}${e}.txt`;return new Promise(((e,a)=>{fs.readFile(s,"utf8",(async(s,o)=>{if(s)return a(s);try{const s=/http:\/\/uploader\.sh\/[^\s]+/,a=o.match(s);if(a){const e=a[0];await this.updateThumbnailStreamUrl(e,r,t,i)}e(o)}catch(e){a(e)}}))}))}async updateThumbnailStreamUrl(e,r,t,i){return(new LiveService).updateStreamUrls(e,i)}}