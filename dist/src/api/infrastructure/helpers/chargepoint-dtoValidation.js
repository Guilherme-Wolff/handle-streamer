import"reflect-metadata";import{validate}from"class-validator";import ExceptionHandler from"../exceptions/exceptions-handler.js";import{DeleteChargepointByIdDTO,FindAllChargepointsDTO,FindByCpoDTO,FindByIdentityDTO,FindOneChargepointDTO,RemoveChargepointsDTO,UpsertChargePointDTO}from"../dto/chargepoint.dto.js";import{HttpStatus}from"../utils/http-status.js";export const validateDTO=(t,e)=>{switch(t){case"UpsertChargepoint":return validateUpsertInputData(e);case"FindByIdentity":return validateFindByIdentityInputData(e);case"FindByCpo":return validateFindByCpoInputData(e);case"FindOne":return validateFindOneInputData(e);case"FindAll":return validateFindAllInputData(e);case"DeleteById":return validateDeleteByIdInputData(e);case"Remove":return validateRemoveInputData(e)}};const validateUpsertInputData=async t=>{const e=new UpsertChargePointDTO;e.cpo=t.cpo,e.identity=t.identity;const n=await validate(e);let a={};return n.length&&(a={data:n}),a},validateFindByIdentityInputData=async t=>{let e={};if("Chargepoint"===t.entity){const n=new FindByIdentityDTO;n.identity=t.identity;const a=await validate(n);return a.length&&(e={data:new ExceptionHandler(HttpStatus.BADREQUEST,a)}),e}e={statusCode:HttpStatus.NOTFOUND,NotFound:`Entity ${t.entity} was not found on registry.`}},validateFindByCpoInputData=async t=>{let e={};if("Chargepoint"===t.entity){const n=new FindByCpoDTO;n.cpo=t.cpo;const a=await validate(n);return a.length&&(e={data:new ExceptionHandler(HttpStatus.BADREQUEST,a)}),e}e={statusCode:HttpStatus.NOTFOUND,NotFound:`Entity ${t.entity} was not found on registry.`}},validateFindOneInputData=async t=>{let e={};if("Chargepoint"===t.entity){const n=new FindOneChargepointDTO;n.id=t.id,n.entityType=t.entity;const a=await validate(n);return a.length&&(e={data:new ExceptionHandler(HttpStatus.BADREQUEST,a)}),e}e={statusCode:HttpStatus.NOTFOUND,NotFound:`Entity ${t.entity} was not found on registry.`}},validateFindAllInputData=async t=>{let e={};if("Chargepoint"===t.entity){const n=new FindAllChargepointsDTO;n.entityType=t.entity;const a=await validate(n);return a.length&&(e={data:new ExceptionHandler(HttpStatus.BADREQUEST,a)}),e}e={statusCode:HttpStatus.NOTFOUND,NotFound:`Entity ${t.entity} was not found on registry.`}},validateDeleteByIdInputData=async t=>{let e={};if(void 0!==t.id||void 0!==t.name){const n=new DeleteChargepointByIdDTO;n.id=t.id,n.identity=t.identity;const a=await validate(n);return a.length&&(e={data:new ExceptionHandler(HttpStatus.BADREQUEST,a)}),e}e={statusCode:HttpStatus.BADREQUEST,BadRequest:`Entity ${t} is undefined.`}},validateRemoveInputData=async t=>{const e=new RemoveChargepointsDTO;e.entities=t;const n=await validate(e);let a={};return n.length&&(a={data:new ExceptionHandler(HttpStatus.BADREQUEST,n)}),a};