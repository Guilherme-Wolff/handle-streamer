import"reflect-metadata";import{validate}from"class-validator";import ExceptionHandler from"../exceptions/exceptions-handler.js";import{FindOneOrganizationDTO,DeleteOrganizationByIdDTO,FindAllOrganizationsDTO,FindByNameDTO,RemoveOrganizationsDTO,UpsertOrganizationDTO}from"../dto/organization.dto.js";import{HttpStatus}from"../utils/http-status.js";export const validateDTO=(t,a)=>{switch(t){case"UpsertOrganization":return validateUpsertInputData(a);case"FindByName":return validateFindByNameInputData(a);case"FindOne":return validateFindOneInputData(a);case"FindAll":return validateFindAllInputData(a);case"DeleteById":return validateDeleteByIdInputData(a);case"Remove":return validateRemoveInputData(a)}};const validateUpsertInputData=async t=>{const a=new UpsertOrganizationDTO;a.name=t.name,a.legalEntity=t.legalEntity;const n=await validate(a);let e={};return n.length&&(e={data:n}),e},validateFindByNameInputData=async t=>{let a={};if("Organization"===t.entity){const n=new FindByNameDTO;n.name=t.name,n.entityType=t.entity;const e=await validate(n);return e.length&&(a={data:new ExceptionHandler(HttpStatus.BADREQUEST,e)}),a}a={statusCode:HttpStatus.NOTFOUND,NotFound:`Entity ${t.entity} was not found on registry.`}},validateFindOneInputData=async t=>{let a={};if("Organization"===t.entity){const n=new FindOneOrganizationDTO;n.id=t.id,n.entityType=t.entity;const e=await validate(n);return e.length&&(a={data:new ExceptionHandler(HttpStatus.BADREQUEST,e)}),a}a={statusCode:HttpStatus.NOTFOUND,NotFound:`Entity ${t.entity} was not found on registry.`}},validateFindAllInputData=async t=>{let a={};if("Organization"===t.entity){const n=new FindAllOrganizationsDTO;n.entityType=t.entity;const e=await validate(n);return e.length&&(a={data:new ExceptionHandler(HttpStatus.BADREQUEST,e)}),a}a={statusCode:HttpStatus.NOTFOUND,NotFound:`Entity ${t.entity} was not found on registry.`}},validateDeleteByIdInputData=async t=>{let a={};if(void 0!==t.id||void 0!==t.name){const n=new DeleteOrganizationByIdDTO;n.id=t.id,n.name=t.name,n.legalEntity=t.legalEntity;const e=await validate(n);return e.length&&(a={data:new ExceptionHandler(HttpStatus.BADREQUEST,e)}),a}a={statusCode:HttpStatus.BADREQUEST,BadRequest:`Entity ${t} is undefined.`}},validateRemoveInputData=async t=>{const a=new RemoveOrganizationsDTO;a.entities=t;const n=await validate(a);let e={};return n.length&&(e={data:new ExceptionHandler(HttpStatus.BADREQUEST,n)}),e};