import"reflect-metadata";import{Router}from"express";import{container}from"tsyringe";import{AuthService}from"../../application/services/auth.service.js";import{UsersService}from"../../application/services/users.service.js";import{HttpStatus}from"../utils/http-status.js";import{Users}from"../../domain/entities/users.entity.js";import{generateHash,compareHash}from"../helpers/bcrypt.js";import{generateJWT}from"../helpers/JWT.js";class AuthController{_router=Router();AuthService=container.resolve(AuthService);UsersService=container.resolve(UsersService);constructor(){this._configure()}_configure(){this._router.post("/login",(async(t,s,e)=>{const r=new Users;try{const{email:e,username:a,password:o}=t.body;r.name=a,r.email=e,r.password=o;const i=await this.AuthService.getPasswordByEmail(r.email);if(await compareHash(r.password,i.password)){const t=await generateJWT(i.id,i.name);s.send(t)}}catch(t){s.status(HttpStatus.BADREQUEST).json({statusCode:HttpStatus.BADREQUEST,error:t.message,stack:t.stack})}})),this._router.post("/register",(async(t,s,e)=>{try{const{email:e,username:r,password:a}=t.body,o=new Users;o.name=r,o.email=e,o.password=await generateHash(a);const i=await this.UsersService.addUser(o);s.send(i)}catch(t){s.status(HttpStatus.BADREQUEST).json({statusCode:HttpStatus.BADREQUEST,error:t.message,stack:t.stack})}})),this._router.get("/userinfo",(async(t,s,e)=>{const{id:r}=t.body;try{const t=await this.AuthService.getUserById(r);s.send(t)}catch(t){s.status(HttpStatus.BADREQUEST).json({statusCode:HttpStatus.BADREQUEST,error:t.message,stack:t.stack})}}))}get router(){return this._router}}export default(new AuthController).router;