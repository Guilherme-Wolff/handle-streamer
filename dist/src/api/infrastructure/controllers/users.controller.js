import"reflect-metadata";import{Router}from"express";import{container}from"tsyringe";import{UsersService}from"../../application/services/users.service.js";import{validateDTO}from"../helpers/chargepoint-dtoValidation.js";import{HttpStatus}from"../utils/http-status.js";import _ from"lodash";import{validateJWT}from"../helpers/JWT.js";class UsersController{_router=Router();UsersService=container.resolve(UsersService);constructor(){this._configure()}_configure(){this._router.get("/",(async(t,s,e)=>{try{const t=await this.UsersService.getAllUsers();s.send(t)}catch(t){s.status(HttpStatus.BADREQUEST).json({statusCode:HttpStatus.BADREQUEST,error:t.message,stack:t.stack})}})),this._router.get("/userinfo",(async(t,s,e)=>{try{const{token:e}=t.body,r=await validateJWT(e);!1===r.isValid?s.status(403).json({statusCode:403}):s.send(r.payload)}catch(t){s.status(HttpStatus.BADREQUEST).json({statusCode:HttpStatus.BADREQUEST,error:t.message,stack:t.stack})}})),this._router.post("/findByIdentity",(async(t,s,e)=>{try{const e=await validateDTO("FindByIdentity",t.body);if(!_.isEmpty(e))return s.status(HttpStatus.BADREQUEST).json(e);const r=await this.UsersService.getAllUsers();s.send(r)}catch(t){s.status(HttpStatus.BADREQUEST).json({statusCode:HttpStatus.BADREQUEST,error:t.message,stack:t.stack})}}))}get router(){return this._router}}export default(new UsersController).router;